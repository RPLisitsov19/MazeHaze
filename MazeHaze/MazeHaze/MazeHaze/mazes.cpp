#include <iostream>
#include <conio.h>
#include "menu.h"
#include "mazes.h"
#include "constants.h"
using namespace std;

const char WIDTH_EASY = 10, HEIGHT_EASY = 10;
const char WIDTH_MEDIUM = 20, HEIGHT_MEDIUM = 20;
const char WIDTH_HARD = 30, HEIGHT_HARD = 30;

unsigned char player = '*';
int posX = 1, posY = 1;
int action;

unsigned char** maze = NULL;

void playerAction() {
    action = _getch();

    int prevposX = posX;
    int prevposY = posY;

    switch (action) {
    case KEY_LEFT: {
        if (maze[posX][posY - 1] != '|' && maze[posX][posY - 1] != '-' && maze[posX][posY - 1] != '+') {
            posY--;
        }

        maze[prevposX][prevposY] = ' ';
        system("cls");
        break;
    }

    case KEY_RIGHT: {
        if (maze[posX][posY + 1] != '|' && maze[posX][posY + 1] != '-' && maze[posX][posY + 1] != '+') {
            posY++;
        }

        maze[prevposX][prevposY] = ' ';
        system("cls");
        break;
    }

    case KEY_DOWN: {
        if (maze[posX + 1][posY] != '|' && maze[posX + 1][posY] != '+' && maze[posX + 1][posY] != '-') {
            posX++;
        }

        maze[prevposX][prevposY] = ' ';
        system("cls");
        break;
    }

    case KEY_UP: {
        if (maze[posX - 1][posY] != '|' && maze[posX - 1][posY] != '+' && maze[posX - 1][posY] != '-') {
            posX--;
        }

        maze[prevposX][prevposY] = ' ';
        system("cls");
        break;
    }


    default: {
        system("cls");
        break;
    }
    }

}

void mazeEasy() {
    maze = new unsigned char* [HEIGHT_EASY];
    unsigned char model[HEIGHT_EASY][WIDTH_EASY] = {
      {'+', '-', '-', '-', '-', '-', '-', '-', '-', '+'},    //0
      {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},    //1
      {'+', '-', '-', '-', '+', ' ', ' ', ' ', ' ', '|'},    //3
      {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},    //4
      {'|', ' ', ' ', ' ', '+', '-', '-', '-', '-', '+'},    //5
      {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},    //6
      {'+', '-', '-', '-', '+', ' ', ' ', ' ', ' ', '|'},    //7
      {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},    //8
      {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'X', '|'},    //9
      {'+', '-', '-', '-', '-', '-', '-', '-', '-', '+'},
    };
    //0    1    2    3    4    5    6    7    8    9 

    for (int i = 0; i < HEIGHT_EASY; i++) {
        maze[i] = new unsigned char[WIDTH_EASY];
        for (int j = 0; j < WIDTH_EASY; j++) {
            maze[i][j] = model[i][j];
        }
    }

    
    while (action != 'q' || 'Q') {

        maze[posX][posY] = player;

        for (int y = 0; y < HEIGHT_EASY; y++) {
            cout << endl;

            for (int x = 0; x < WIDTH_EASY; x++) {
                cout << maze[y][x];
            }
        }

        playerAction();
    }
    
}

void mazeMedium() {
    maze = new unsigned char* [HEIGHT_MEDIUM];
    unsigned char model[HEIGHT_MEDIUM][WIDTH_MEDIUM] = {
  {'+', '-', '-', '-', '-', '-', '-', '-', '+', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '+'},    //0
  {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},    //1
  {'+', '-', '-', '-', '-', '+', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},    //2
  {'|', ' ', ' ', ' ', ' ', '|', ' ', ' ', '+', ' ', ' ', ' ', '+', '-', '+', ' ', ' ', ' ', ' ', '|'},    //3
  {'|', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', '|'},    //4
  {'|', ' ', ' ', ' ', ' ', '+', '-', '-', '-', '-', '-', '+', ' ', ' ', '|', ' ', ' ', ' ', ' ', '|'},    //5
  {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', '|'},    //6
  {'|', ' ', ' ', ' ', ' ', '+', '-', '-', '+', ' ', ' ', '+', '-', '-', '+', ' ', ' ', ' ', ' ', '|'},    //7
  {'|', ' ', ' ', ' ', '|', ' ', ' ', ' ', '|', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},    //8
  {'+', '-', '+', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', '|', ' ', ' ', '+', ' ', ' ', ' ', ' ', '|'},    //9
  {'|', ' ', ' ', '+', '-', '-','+', ' ', '+', '-', '-', '+', ' ', ' ', '|', ' ', ' ', ' ', ' ', '|' },    //10
  {'|', ' ', ' ', '|', ' ', ' ',' ', ' ', '|', ' ', ' ', ' ', '-', '-', '+', '-', '-', '-', '-', '+' },    //11
  {'|', ' ', ' ', ' ', ' ', ' ',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', '|' },    //12
  {'|', ' ', ' ', '+', '-', '-','-', '-', '-', '-', '-', '+', ' ', ' ', '+', ' ', ' ', ' ', ' ', '|' },    //13
  {'|', ' ', ' ', '|', ' ', ' ',' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|' },    //14
  {'|', ' ', ' ', '|', ' ', ' ',' ', '+', '-', '-', '-', '+', ' ', ' ', ' ', '+', '-', '-', '-', '+' },    //15
  {'|', ' ', ' ', '|', ' ', ' ',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|' },    //16
  {'|', ' ', ' ', '+', '-', '-','-', '-', '-', '-', '-', '+', ' ', ' ', ' ', ' ', '+', ' ', ' ', '|' },    //17
  {'|', ' ', 'X', ' ', ' ', ' ',' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', '|', ' ', ' ', '|' },    //18
  {'+', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '+', '-', '-', '-', '-', '+', '-', '-', '+'} };  //19
  //0    1    2    3    4    5    6    7    8    9    10    11    12    13    14    15   16    17    18    19

    for (int i = 0; i < HEIGHT_MEDIUM; i++) {
        maze[i] = new unsigned char[WIDTH_MEDIUM];
        for (int j = 0; j < WIDTH_MEDIUM; j++) {
            maze[i][j] = model[i][j];
        }

    }
    while (action != 'q' || 'Q') {

        maze[posX][posY] = player;

        for (int y = 0; y < HEIGHT_MEDIUM; y++) {
            cout << endl;

            for (int x = 0; x < WIDTH_MEDIUM; x++) {
                cout << maze[y][x];
            }
        }

        playerAction();
    }
}

void mazeHard() {
    maze = new unsigned char* [HEIGHT_HARD];
    unsigned char model[HEIGHT_HARD][WIDTH_HARD] = {
  {'+', '-', '-', '-', '-', '-', '-', '-', '+', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '+', '-', '-', '-', '-', '-', '-', '-', '-', '-', '+'},    //0
  {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},    //1
  {'+', '-', '-', '-', '-', '+', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '+', ' ', ' ', ' ', '|'},    //2
  {'|', ' ', ' ', ' ', ' ', '|', ' ', ' ', '+', ' ', ' ', ' ', '+', '-', '+', ' ', ' ', ' ', ' ', '+', '-', '-', '-', '+', ' ', '|', ' ', ' ', ' ', '|'},    //3
  {'|', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', '|'},    //4
  {'|', ' ', ' ', ' ', ' ', '+', '-', '-', '-', '-', '-', '+', ' ', ' ', '|', ' ', ' ', ' ', '+', '-', '-', '-', '-', '-', '-', '+', ' ', ' ', ' ', '|'},    //5
  {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', '|'},    //6
  {'|', ' ', ' ', ' ', ' ', '+', '-', '-', '+', ' ', ' ', '+', '-', '-', '+', '-', '-', '-', '-', '+', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', '|'},    //7
  {'|', ' ', ' ', ' ', '|', ' ', ' ', ' ', '|', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '+', ' ', ' ', ' ', '|'},    //8
  {'+', '-', '+', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', '|', ' ', ' ', '+', ' ', ' ', ' ', ' ', '+', '-', '-', '-', '-', '+', ' ', ' ', ' ', ' ', '|'},    //9
  {'|', ' ', ' ', '+', '-', '-','+', ' ', '+', '-', '-', '+', ' ', ' ', '|', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|' },    //10
  {'|', ' ', ' ', '|', ' ', ' ',' ', ' ', '|', ' ', ' ', ' ', '-', '-', '+', '-', '-', '-', '-', '+', ' ', ' ', ' ', ' ', '+', '-', '-', '-', '-', '+' },    //11
  {'|', ' ', ' ', ' ', ' ', ' ',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', '|' },    //12
  {'|', ' ', ' ', '+', '-', '-','-', '-', '-', '-', '-', '+', ' ', ' ', '+', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', '|' },    //13
  {'|', ' ', ' ', '|', ' ', ' ',' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', '|' },    //14
  {'|', ' ', ' ', '|', ' ', ' ',' ', '+', '-', '-', '-', '+', ' ', ' ', ' ', '+', '-', '-', '-', '+', '-', '-', '-', '-', '+', ' ', ' ', ' ', ' ', '|' },    //15
  {'|', ' ', ' ', '|', ' ', ' ',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|' },    //16
  {'|', ' ', ' ', '+', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '+', ' ', ' ', ' ', '+', '-', '-', '-', '-', '-', '+' },    //17
  {'|', ' ', ' ', ' ', ' ', ' ',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|' },    //18
  {'|', ' ', ' ', ' ', ' ', ' ',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|' },    //19
  {'|', '-', '-', '-', '-', '-','-', '-', '-', '+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', '+', ' ', ' ', ' ', ' ', ' ', '|' },    //20
  {'|', ' ', ' ', ' ', ' ', ' ',' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|' },    //21
  {'|', ' ', ' ', ' ', ' ', ' ',' ', ' ', ' ', '|', ' ', ' ', ' ', '+', '-', '-', '-', '-', '-', '+', '-', '-', '-', '-', '-', '+', ' ', ' ', ' ', '|' },    //22
  {'|', ' ', ' ', ' ', ' ', ' ',' ', ' ', ' ', '+', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|' },    //23
  {'|', ' ', ' ', ' ', ' ', ' ',' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '+', ' ', ' ', ' ', ' ', '+', ' ', ' ', ' ', ' ', '|' },    //24
  {'|', ' ', ' ', ' ', ' ', ' ',' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', '|' },    //25
  {'|', ' ', ' ', '+', ' ', ' ','+', '-', '-', '-', '-', '-', '-', '+', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', '+', '-', '-', '-', '-', '+' },    //26
  {'|', ' ', ' ', '|', ' ', ' ',' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|' },    //27
  {'|', ' ', ' ', '|', ' ', ' ',' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', 'X', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|' },    //28
  {'+', '-', '-', '+', '-', '-', '-', '-', '-', '-', '-', '-', '-', '+', '-', '-', '-', '-', '-', '+', '-', '-', '-', '-', '-', '-', '-', '-', '-', '+'} };  //29
  //0    1    2    3    4    5    6    7    8    9    10    11    12    13    14    15   16    17  18   19   20  21  22  23  24   25   26  27   28   29

    for (int i = 0; i < HEIGHT_HARD; i++) {
        maze[i] = new unsigned char[WIDTH_HARD];
        for (int j = 0; j < WIDTH_HARD; j++) {
            maze[i][j] = model[i][j];
        }
    }
    while (action != 'q' || 'Q') {

        maze[posX][posY] = player;

        for (int y = 0; y < HEIGHT_HARD; y++) {
            cout << endl;

            for (int x = 0; x < WIDTH_HARD; x++) {
                cout << maze[y][x];
            }
        }

        playerAction();
    }
}